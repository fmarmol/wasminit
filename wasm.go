package main

var (
	FileJS = ""
	FileHTML = "PCFkb2N0eXBlIGh0bWw+CjxodG1sPgo8aGVhZD4KCTxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KCTx0aXRsZT5HbyB3YXNtPC90aXRsZT4KCTxzY3JpcHQgc3JjPSJ3YXNtX2V4ZWMuanMiPjwvc2NyaXB0Pgo8L2hlYWQ+Cgo8Ym9keT4KCTxzY3JpcHQ+CgkJY29uc3QgZ28gPSBuZXcgR28oKTsKCQlXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhmZXRjaCgibWFpbi53YXNtIiksIGdvLmltcG9ydE9iamVjdCkudGhlbigocmVzdWx0KSA9PiB7CgkJCWdvLnJ1bihyZXN1bHQuaW5zdGFuY2UpOwoJCX0pLmNhdGNoKChlcnIpID0+IHsKCQkJY29uc29sZS5lcnJvcihlcnIpOwoJCX0pOwoJPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo="
)
